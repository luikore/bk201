dir = File.expand_path(File.dirname __FILE__)
require dir + '/ext/bk201_ext.so'
require dir + '/bk201/mov_x_y.rb'

# example
#   require 'bk201'
#   class A
#     extend Bk201::Compile
#     asm_method 'int_add', :int, 2 do |a|
#       a.pop :eax
#       a.pop :ecx
#       a.add_eax_ecx
#     end
#   end
#   puts A.new.int_add 5, 8
module Bk201
  class AsmProxy
    attr_reader :code
    def initialize 
      @code = []
    end

    def mov_eax i
      @code << opb_dword(0xb8, i)
    end

=begin
# mov_x_y.rb is generated by:
rs = %w[eax ecx edx ebx esp ebp esi edi]
strs = []
rs.each{|x| rs.each{|y|
  strs << "def mov_#{x}_#{y}\n"
  strs << '@code << "'
  strs << %x[op 'mov #{x},#{y}'].sub(/^/,'"\x').sub(/\s/,'\x').sub(/\n/,'"')
  strs << "\nend\n\n"
}};
File.open('mov_x_y.rb', 'w'){|f| f<< strs.join}
=end
    include MovXY
  end

  # module to be extended
  module Asm
    def asm_method type, name, n_params
      # class self will be passed to Bk201.asm_method
      # so extend, not include.
      raise 'extend Bk201::Compile, not include' unless self.is_a? Class
      asm = Bk201::AsmProxy.new
      yield asm
      Bk201.asm_method self, name.to_s, type, n_params, asm.code.join
    end
  end
end
